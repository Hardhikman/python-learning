{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPtujQM1bp6o2G81uXSwV8T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"id":"dAuiqtgimf9d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753355591918,"user_tz":-330,"elapsed":39,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"5901ab12-f7cc-4316-d384-898619f99c32"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hardhik \n"," HARDHIK \n"," hardhik\n"]}],"source":["name = \"hardhik\"\n","print(name.title(), \"\\n\", name.upper(), \"\\n\", name.lower())"]},{"cell_type":"code","source":["name=\"   hardhik   \"\n","print(name.strip())\n","print(name.rstrip())\n","print(name.lstrip())"],"metadata":{"id":"7dYZHNxDmrRd","executionInfo":{"status":"ok","timestamp":1753355591961,"user_tz":-330,"elapsed":37,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3af71d1b-f88a-4ac5-a748-35905497adfd"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["hardhik\n","   hardhik\n","hardhik   \n"]}]},{"cell_type":"code","source":["age=input(\"what is your age\")\n","print(age)\n","message = \"Happy \" + age + \"rd Birthday!\"\n","print(message)\n","print(str(age))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rvQiuXuY95nh","executionInfo":{"status":"ok","timestamp":1753355603301,"user_tz":-330,"elapsed":11344,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"1fcf1d6b-a517-44ba-f3ed-3eb2af3b850f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["what is your age25\n","25\n","Happy 25rd Birthday!\n","25\n"]}]},{"cell_type":"code","source":["colors=['orange','red','purple','white']\n","print(colors[0].title())\n","print(colors[-1])\n","print(len(colors))\n","colors.sort(reverse=True) # sort and then reverse\n","print(colors)\n","colors.insert(2,'violet')  # .append\n","print(colors)\n","colors.pop(-2)  #that is purple #.remove\n","print(colors)\n","print(colors[2:4])  #slicing\n","\n","number=[1, 2,3]\n","print(number)\n","\n","number=(1, 2,3) #tuple means immutable\n","print(number)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9agMTuRh_GI1","executionInfo":{"status":"ok","timestamp":1753355603302,"user_tz":-330,"elapsed":37,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"079eb5d0-4079-4adc-aacd-5b27da06285c"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Orange\n","white\n","4\n","['white', 'red', 'purple', 'orange']\n","['white', 'red', 'violet', 'purple', 'orange']\n","['white', 'red', 'violet', 'orange']\n","['violet', 'orange']\n","[1, 2, 3]\n","(1, 2, 3)\n"]}]},{"cell_type":"code","source":["numbers=list(range(1,10))\n","for num in numbers:\n","    print(num+1)\n","\n","squares = [value**2 for value in range(1,11)]   #it is a list storing squares after every for loop\n","print(squares)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P8qKke9RCWNA","executionInfo":{"status":"ok","timestamp":1753355603303,"user_tz":-330,"elapsed":28,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"d151d1ef-3be4-47fe-c394-dcb86c113e39"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"]}]},{"cell_type":"code","source":["banned_users = ['andrew', 'carolina', 'david']\n","for user in banned_users:   #keyword in & not in\n","  if user not in banned_users:\n","      print(user.title() + \", you can post a response if you wish.\")\n","  if user in banned_users:\n","      print(\"yes!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1LeYs27XGn-4","executionInfo":{"status":"ok","timestamp":1753355603304,"user_tz":-330,"elapsed":20,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"5853f1d2-2d03-48f1-e36d-a2a756e3217d"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["yes!\n","yes!\n","yes!\n"]}]},{"cell_type":"code","source":["#dictionary = key and value | flower bracket (compared to list)\n","alien_0 = {'color': 'green', 'points': 5}\n","print(alien_0)\n","alien_0['x_position'] = 0\n","alien_0['y_position'] = 25\n","print(alien_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sTujLqCQH91K","executionInfo":{"status":"ok","timestamp":1753355603305,"user_tz":-330,"elapsed":13,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"24fd204a-7be2-400c-f0c6-4f67f553b00b"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["{'color': 'green', 'points': 5}\n","{'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25}\n"]}]},{"cell_type":"code","source":["user_0 = {\n"," 'username': 'efermi',\n"," 'first': 'enrico',\n"," 'last': 'fermi',\n"," }\n","for key, value in user_0.items():\n","  print(\"\\nKey: \" + key)\n","  print(\"Value: \" + value)\n","print(\"//////\")\n","for key in user_0.keys():\n","  print(key)\n","print(\"//////\")\n","for value in user_0.values():\n","  print(value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-2PXCyY6IbzZ","executionInfo":{"status":"ok","timestamp":1753355603376,"user_tz":-330,"elapsed":70,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"d94dde0a-5a28-459f-cde2-18bec5efa5e6"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Key: username\n","Value: efermi\n","\n","Key: first\n","Value: enrico\n","\n","Key: last\n","Value: fermi\n","//////\n","username\n","first\n","last\n","//////\n","efermi\n","enrico\n","fermi\n"]}]},{"cell_type":"code","source":["#list of dictionaries\n","\n","alien_0 = {'color': 'green', 'points': 5}\n","alien_1 = {'color': 'yellow', 'points': 10}\n","alien_2 = {'color': 'red', 'points': 15}\n","aliens = [alien_0, alien_1, alien_2]\n","print(aliens)\n","for alien in aliens:\n"," print(alien)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TfaDEaEoJg54","executionInfo":{"status":"ok","timestamp":1753355603377,"user_tz":-330,"elapsed":33,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"130c32b5-5784-439c-8583-c5862adb8134"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["[{'color': 'green', 'points': 5}, {'color': 'yellow', 'points': 10}, {'color': 'red', 'points': 15}]\n","{'color': 'green', 'points': 5}\n","{'color': 'yellow', 'points': 10}\n","{'color': 'red', 'points': 15}\n"]}]},{"cell_type":"code","source":["#List in dictionary- using : instead of = in list\n","\n","favorite_languages = {\n"," 'jen': ['python', 'ruby'],\n"," 'sarah': ['c'],\n"," 'edward': ['ruby', 'go'],\n"," 'phil': ['python', 'haskell'],\n"," }\n","for name, languages in favorite_languages.items():\n"," print(\"\\n\" + name.title() + \"'s favorite languages are:\")\n","for language in languages:\n"," print(\"\\t\" + language.title())\n","\n","#Dictionary in dictionary-  using : instaead of =\n","users = {\n"," 'aeinstein': {\n"," 'first': 'albert',\n"," 'last': 'einstein',\n"," 'location': 'princeton',\n"," },\n"," 'mcurie': {\n"," 'first': 'marie',\n"," 'last': 'curie',\n"," 'location': 'paris',\n"," },\n"," }\n","for username, user_info in users.items():\n","  print(\"\\nUsername: \" + username)\n","  full_name = user_info['first'] + \" \" + user_info['last']\n","  location = user_info['location']\n","  print(\"\\tFull name: \" + full_name.title())\n","  print(\"\\tLocation: \" + location.title())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UH8P6xEQIwDA","executionInfo":{"status":"ok","timestamp":1753355603379,"user_tz":-330,"elapsed":27,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"59153458-72d1-41f2-baea-c03486d05da9"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Jen's favorite languages are:\n","\n","Sarah's favorite languages are:\n","\n","Edward's favorite languages are:\n","\n","Phil's favorite languages are:\n","\tPython\n","\tHaskell\n","\n","Username: aeinstein\n","\tFull name: Albert Einstein\n","\tLocation: Princeton\n","\n","Username: mcurie\n","\tFull name: Marie Curie\n","\tLocation: Paris\n"]}]},{"cell_type":"code","source":["# you can set a values inside function bracket like s=3\n","\n","def make_pizza(*toppings): #using * for arbitrary sending of arguments\n"," \"\"\"Print the list of toppings that have been requested.\"\"\"\n"," print(toppings)\n","\n","make_pizza('pepperoni')\n","make_pizza('mushrooms', 'green peppers', 'extra cheese')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q80r2YOdL3qQ","executionInfo":{"status":"ok","timestamp":1753355603380,"user_tz":-330,"elapsed":20,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"c6a59ea5-91dc-4daf-c97e-8cd8eb11543d"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["('pepperoni',)\n","('mushrooms', 'green peppers', 'extra cheese')\n"]}]},{"cell_type":"code","source":["#class formation | inheritance amd usage of parent class inside child class\n","\n","class Car():\n","  def __init__(self, make, model, year):\n","    self.make = make\n","    self.model = model\n","    self.year = year\n","    self.odometer_reading = 0\n","\n","  def get_descriptive_name(self):\n","    long_name = str(self.year) + ' ' + self.make + ' ' + self.model\n","    return long_name.title()\n","\n","  def read_odometer(self):\n","    print(\"This car has \" + str(self.odometer_reading) + \" miles on it.\")\n","\n","  def update_odometer(self, mileage):\n","    if mileage >= self.odometer_reading:\n","          self.odometer_reading = mileage\n","    else:\n","          print(\"You can't roll back an odometer!\")\n","\n","  def increment_odometer(self, miles):\n","    self.odometer_reading += miles\n","\n","class ElectricCar(Car):\n","  def __init__(self, make, model, year):\n","    super().__init__(make, model, year)\n","    self.battery_size = 70\n","\n","  def describe_battery(self):\n","    print(\"This car has a \" + str(self.battery_size) + \"-kWh battery.\")\n","my_tesla = ElectricCar(\"tesla\", \"model s\", 2016)\n","print(my_tesla.get_descriptive_name())\n","my_tesla.describe_battery()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P03Di5HPKmli","executionInfo":{"status":"ok","timestamp":1753355629467,"user_tz":-330,"elapsed":23,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"4ff212dc-44ef-424b-9229-48a2b07ab4d6"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["2016 Tesla Model S\n","This car has a 70-kWh battery.\n"]}]},{"cell_type":"code","source":["#usage of f keyword for using string inside double quote\n","name = \"Alice\"\n","age = 30\n","print(f\"Hello, my name is {name} and I am {age} years old.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AZbkmNq0F5VT","executionInfo":{"status":"ok","timestamp":1753355635333,"user_tz":-330,"elapsed":14,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"69cac323-9b61-41c8-a8c3-9575008ed1fd"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, my name is Alice and I am 30 years old.\n"]}]},{"cell_type":"code","source":["#async programing=tasks that involve I/O operations, such as reading from files, making network requests, or interacting with databases\n","#Async is about doing lots of tasks in order, but in a way that lets others jump in when there's waiting time. Threads are about doing different tasks at the same time within the same app\n","import asyncio\n","\n","async def fetch_data():\n","  print(\"Fetching data...\")\n","  await asyncio.sleep(2)  # Simulate a network request\n","  print(\"Data fetched.\")\n","  return \"Some data\"\n","\n","async def main():\n","  data = await fetch_data()\n","  print(f\"Received: {data}\")\n","\n","# Instead of asyncio.run(main()), directly await main() in a Colab environment\n","await main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DBezte7ZGrzh","executionInfo":{"status":"ok","timestamp":1753356067962,"user_tz":-330,"elapsed":2050,"user":{"displayName":"Hardhik m","userId":"05847475800820644914"}},"outputId":"e8b1fa16-648a-436b-b541-0498c0e0b8b7"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Fetching data...\n","Data fetched.\n","Received: Some data\n"]}]}]}